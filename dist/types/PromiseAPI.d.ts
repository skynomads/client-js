import { Configuration } from '../configuration';
import { ClientIdentity } from '../models/ClientIdentity';
import { ClientUpdateIdentityBody } from '../models/ClientUpdateIdentityBody';
import { V1Account } from '../models/V1Account';
import { V1ApplicationMetrics } from '../models/V1ApplicationMetrics';
import { V1JobInput } from '../models/V1JobInput';
import { V1JobResponse } from '../models/V1JobResponse';
import { V1SetupIntent } from '../models/V1SetupIntent';
import { V1alpha1Application } from '../models/V1alpha1Application';
import { V1alpha1Export } from '../models/V1alpha1Export';
import { V1alpha1ExportSchedule } from '../models/V1alpha1ExportSchedule';
import { V1alpha1ExportTarget } from '../models/V1alpha1ExportTarget';
import { V1alpha1Template } from '../models/V1alpha1Template';
import { CloudplaneApiRequestFactory, CloudplaneApiResponseProcessor } from "../apis/CloudplaneApi";
export declare class PromiseCloudplaneApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CloudplaneApiRequestFactory, responseProcessor?: CloudplaneApiResponseProcessor);
    adminDeleteIdentity(id: string, _options?: Configuration): Promise<string>;
    adminGetIdentity(id: string, _options?: Configuration): Promise<ClientIdentity>;
    adminListIdentity(_options?: Configuration): Promise<Array<ClientIdentity>>;
    adminListIdentityApplication(id: string, _options?: Configuration): Promise<Array<V1alpha1Application>>;
    adminPutIdentity(id: string, identity: ClientUpdateIdentityBody, _options?: Configuration): Promise<string>;
    adminSuspendIdentity(id: string, _options?: Configuration): Promise<string>;
    deleteAccount(_options?: Configuration): Promise<string>;
    deleteApplication(name: string, _options?: Configuration): Promise<string>;
    deleteExportSchedule(name: string, _options?: Configuration): Promise<string>;
    deleteExportTarget(name: string, _options?: Configuration): Promise<string>;
    deletePaymentMethod(id: string, _options?: Configuration): Promise<string>;
    getAccount(_options?: Configuration): Promise<V1Account>;
    getApplication(name: string, _options?: Configuration): Promise<V1alpha1Application>;
    getApplicationMetrics(name: string, _options?: Configuration): Promise<V1ApplicationMetrics>;
    getExport(name: string, _options?: Configuration): Promise<V1alpha1Export>;
    getExportSchedule(name: string, _options?: Configuration): Promise<V1alpha1ExportSchedule>;
    getExportTarget(name: string, _options?: Configuration): Promise<V1alpha1ExportTarget>;
    listApplication(_options?: Configuration): Promise<Array<V1alpha1Application>>;
    listExport(_options?: Configuration): Promise<Array<V1alpha1Export>>;
    listExportSchedule(_options?: Configuration): Promise<Array<V1alpha1ExportSchedule>>;
    listExportTarget(_options?: Configuration): Promise<Array<V1alpha1ExportTarget>>;
    listTemplate(_options?: Configuration): Promise<Array<V1alpha1Template>>;
    postSetupIntent(_options?: Configuration): Promise<V1SetupIntent>;
    putAccount(account: V1Account, _options?: Configuration): Promise<V1Account>;
    putApplication(application: V1alpha1Application, _options?: Configuration): Promise<V1alpha1Application>;
    putExport(_export: V1alpha1Export, _options?: Configuration): Promise<V1alpha1Export>;
    putExportSchedule(schedule: V1alpha1ExportSchedule, _options?: Configuration): Promise<V1alpha1ExportSchedule>;
    putExportTarget(exportTarget: V1alpha1ExportTarget, _options?: Configuration): Promise<V1alpha1ExportTarget>;
    putJob(jobInput: V1JobInput, _options?: Configuration): Promise<V1JobResponse>;
}
